{"ast":null,"code":"var _jsxFileName = \"/Volumes/Projects/Code/chess-assignment-comera/src/components/Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Chessboard from 'chessboardjsx';\nimport { Chess } from 'chess.js';\nimport Button from './Button'; // Import the reusable Button component\nimport { toast, ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport MoveHistory from './MoveHistory';\nimport '../App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Game({\n  theme\n}) {\n  _s();\n  // State to manage the chess game logic using the Chess.js library\n  const [game, setGame] = useState(new Chess());\n\n  // State to store the current position of pieces on the chessboard (FEN format)\n  const [fen, setFen] = useState('start');\n\n  // State to store the history of moves made during the game\n  const [history, setHistory] = useState([]);\n\n  // State to track whether the first move has been made (used to enable/disable certain buttons)\n  const [isFirstMove, setIsFirstMove] = useState(false);\n\n  // State to manage the dynamic width of the chessboard, useful for responsiveness\n  const [boardWidth, setBoardWidth] = useState(700);\n\n  // Function to update the board's width based on the current window size\n  const updateBoardWidth = () => {\n    // If the window is narrower than 600px, reduce the chessboard size\n    const width = window.innerWidth < 600 ? window.innerWidth - 40 : 700;\n    setBoardWidth(width);\n  };\n\n  // useEffect to handle resizing of the window and updating the chessboard width accordingly\n  useEffect(() => {\n    updateBoardWidth(); // Set initial board width\n    // Add event listener to listen for window resize events\n    window.addEventListener('resize', updateBoardWidth);\n\n    // Cleanup the event listener when the component unmounts\n    return () => {\n      window.removeEventListener('resize', updateBoardWidth);\n    };\n  }, []);\n\n  // Function to handle when a piece is dropped onto the board\n  const onDrop = ({\n    sourceSquare,\n    targetSquare\n  }) => {\n    console.log(\"Source:\", sourceSquare, \"Target:\", targetSquare);\n    try {\n      // Try to make a move in the game\n      const move = game.move({\n        from: sourceSquare,\n        // Where the piece was moved from\n        to: targetSquare,\n        // Where the piece was moved to\n        promotion: 'q' // Automatically promote pawns to a queen when reaching the last rank\n      });\n\n      // If the move is invalid, notify the user\n      if (move === null) {\n        toast.error('Invalid move!');\n        return;\n      }\n\n      // If the move is valid, update the game state\n      setFen(game.fen()); // Update the board position\n      setHistory(game.history()); // Update the history of moves\n      setIsFirstMove(true); // Mark that the first move has been made\n\n      // Check if the move resulted in a check or checkmate\n      if (game.isCheck()) {\n        toast.info('Check!');\n      }\n      if (game.isCheckmate()) {\n        toast.success('Checkmate! You win!');\n        return; // End the game if checkmate occurs\n      }\n\n      // Handle the computer's move with a random choice after the player's move\n      setTimeout(() => {\n        const possibleMoves = game.moves();\n        if (game.isGameOver()) return; // Stop if the game is over\n\n        // Make a random move for the computer\n        const randomMove = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\n        game.move(randomMove);\n        setFen(game.fen()); // Update the board with the new position\n        setHistory(game.history()); // Update the move history\n\n        // Notify if the computer's move resulted in a check or checkmate\n        if (game.isCheck()) {\n          toast.info('Check!');\n        }\n        if (game.isCheckmate()) {\n          toast.error('Checkmate! You lose!');\n        }\n      }, 1000); // Delay of 1 second for the computer's move\n    } catch (error) {\n      // Log any errors and notify the user of an invalid move\n      console.log(\"Error making move:\", error.message);\n      toast.error('Invalid move!');\n    }\n  };\n\n  // Function to handle the player resigning from the game\n  const handleResign = () => {\n    toast.error('You resigned. Game over! The computer wins!');\n    // Reset the game state to start a new game\n    setGame(new Chess());\n    setFen('start');\n    setHistory([]);\n    setIsFirstMove(false); // Reset the first move state\n  };\n\n  // Function to handle offering a draw to the computer\n  const handleOfferDraw = () => {\n    toast.info('You offered a draw. Wait for the opponent\\'s response.');\n    // Additional logic for handling a draw offer can be added here\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `game-page ${theme}`,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"move-history-title\",\n      children: \"Chess Board\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: [/*#__PURE__*/_jsxDEV(Chessboard, {\n        position: fen // Set the position of the pieces\n        ,\n        onDrop: onDrop // Handle piece movements\n        ,\n        width: boardWidth // Dynamic board width for responsiveness\n        ,\n        lightSquareStyle: {\n          backgroundColor: '#f0d9b5'\n        } // Light square color\n        ,\n        darkSquareStyle: {\n          backgroundColor: '#b58863'\n        } // Dark square color\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"control-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleResign,\n          disabled: !isFirstMove,\n          children: \"Resign\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleOfferDraw,\n          disabled: !isFirstMove,\n          children: \"Offer Draw\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MoveHistory, {\n      history: history\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {\n      position: \"top-right\" // Position of the toast notifications\n      ,\n      autoClose: 2000 // Automatically close after 2 seconds\n      ,\n      hideProgressBar: true // Hide progress bar for toasts\n      ,\n      newestOnTop: true // Show the newest toast on top\n      ,\n      closeOnClick: true // Close toast when clicked\n      ,\n      pauseOnFocusLoss: true // Pause toast when window loses focus\n      ,\n      draggable: true // Allow dragging of toasts\n      ,\n      pauseOnHover: true // Pause on hover over toast\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n}\n_s(Game, \"d9r4bRIsxWfFVYRodXzmPwHDPS8=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","Chessboard","Chess","Button","toast","ToastContainer","MoveHistory","jsxDEV","_jsxDEV","Game","theme","_s","game","setGame","fen","setFen","history","setHistory","isFirstMove","setIsFirstMove","boardWidth","setBoardWidth","updateBoardWidth","width","window","innerWidth","addEventListener","removeEventListener","onDrop","sourceSquare","targetSquare","console","log","move","from","to","promotion","error","isCheck","info","isCheckmate","success","setTimeout","possibleMoves","moves","isGameOver","randomMove","Math","floor","random","length","message","handleResign","handleOfferDraw","className","children","fileName","_jsxFileName","lineNumber","columnNumber","position","lightSquareStyle","backgroundColor","darkSquareStyle","onClick","disabled","autoClose","hideProgressBar","newestOnTop","closeOnClick","pauseOnFocusLoss","draggable","pauseOnHover","_c","$RefreshReg$"],"sources":["/Volumes/Projects/Code/chess-assignment-comera/src/components/Game.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Chessboard from 'chessboardjsx';\nimport { Chess } from 'chess.js';\nimport Button from './Button'; // Import the reusable Button component\nimport { toast, ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport MoveHistory from './MoveHistory';\nimport '../App.css';\n\nfunction Game({ theme }) {\n  // State to manage the chess game logic using the Chess.js library\n  const [game, setGame] = useState(new Chess());\n\n  // State to store the current position of pieces on the chessboard (FEN format)\n  const [fen, setFen] = useState('start');\n\n  // State to store the history of moves made during the game\n  const [history, setHistory] = useState([]);\n\n  // State to track whether the first move has been made (used to enable/disable certain buttons)\n  const [isFirstMove, setIsFirstMove] = useState(false);\n\n  // State to manage the dynamic width of the chessboard, useful for responsiveness\n  const [boardWidth, setBoardWidth] = useState(700);\n\n  // Function to update the board's width based on the current window size\n  const updateBoardWidth = () => {\n    // If the window is narrower than 600px, reduce the chessboard size\n    const width = window.innerWidth < 600 ? window.innerWidth - 40 : 700;\n    setBoardWidth(width);\n  };\n\n  // useEffect to handle resizing of the window and updating the chessboard width accordingly\n  useEffect(() => {\n    updateBoardWidth(); // Set initial board width\n    // Add event listener to listen for window resize events\n    window.addEventListener('resize', updateBoardWidth);\n\n    // Cleanup the event listener when the component unmounts\n    return () => {\n      window.removeEventListener('resize', updateBoardWidth);\n    };\n  }, []);\n\n  // Function to handle when a piece is dropped onto the board\n  const onDrop = ({ sourceSquare, targetSquare }) => {\n    console.log(\"Source:\", sourceSquare, \"Target:\", targetSquare);\n\n    try {\n      // Try to make a move in the game\n      const move = game.move({\n        from: sourceSquare, // Where the piece was moved from\n        to: targetSquare,   // Where the piece was moved to\n        promotion: 'q',     // Automatically promote pawns to a queen when reaching the last rank\n      });\n\n      // If the move is invalid, notify the user\n      if (move === null) {\n        toast.error('Invalid move!');\n        return;\n      }\n\n      // If the move is valid, update the game state\n      setFen(game.fen());         // Update the board position\n      setHistory(game.history()); // Update the history of moves\n      setIsFirstMove(true);       // Mark that the first move has been made\n\n      // Check if the move resulted in a check or checkmate\n      if (game.isCheck()) {\n        toast.info('Check!');\n      }\n\n      if (game.isCheckmate()) {\n        toast.success('Checkmate! You win!');\n        return; // End the game if checkmate occurs\n      }\n\n      // Handle the computer's move with a random choice after the player's move\n      setTimeout(() => {\n        const possibleMoves = game.moves();\n        if (game.isGameOver()) return; // Stop if the game is over\n\n        // Make a random move for the computer\n        const randomMove = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\n        game.move(randomMove);\n        setFen(game.fen()); // Update the board with the new position\n        setHistory(game.history()); // Update the move history\n\n        // Notify if the computer's move resulted in a check or checkmate\n        if (game.isCheck()) {\n          toast.info('Check!');\n        }\n\n        if (game.isCheckmate()) {\n          toast.error('Checkmate! You lose!');\n        }\n      }, 1000); // Delay of 1 second for the computer's move\n    } catch (error) {\n      // Log any errors and notify the user of an invalid move\n      console.log(\"Error making move:\", error.message);\n      toast.error('Invalid move!');\n    }\n  };\n\n  // Function to handle the player resigning from the game\n  const handleResign = () => {\n    toast.error('You resigned. Game over! The computer wins!');\n    // Reset the game state to start a new game\n    setGame(new Chess());\n    setFen('start');\n    setHistory([]);\n    setIsFirstMove(false); // Reset the first move state\n  };\n\n  // Function to handle offering a draw to the computer\n  const handleOfferDraw = () => {\n    toast.info('You offered a draw. Wait for the opponent\\'s response.');\n    // Additional logic for handling a draw offer can be added here\n  };\n\n  return (\n    <div className={`game-page ${theme}`}>\n      {/* Title for the chessboard section */}\n      <h2 className=\"move-history-title\">Chess Board</h2>\n\n      {/* Chessboard component */}\n      <div className=\"game-container\">\n        <Chessboard\n          position={fen} // Set the position of the pieces\n          onDrop={onDrop} // Handle piece movements\n          width={boardWidth} // Dynamic board width for responsiveness\n          lightSquareStyle={{ backgroundColor: '#f0d9b5' }} // Light square color\n          darkSquareStyle={{ backgroundColor: '#b58863' }}  // Dark square color\n        />\n\n        {/* Control buttons for Resigning and Offering a Draw */}\n        <div className=\"control-buttons\">\n          <Button onClick={handleResign} disabled={!isFirstMove}>\n            Resign\n          </Button>\n          <Button onClick={handleOfferDraw} disabled={!isFirstMove}>\n            Offer Draw\n          </Button>\n        </div>\n      </div>\n\n      {/* Component to display the move history */}\n      <MoveHistory history={history} />\n\n      {/* Toast notification container for displaying alerts */}\n      <ToastContainer \n        position=\"top-right\"  // Position of the toast notifications\n        autoClose={2000}      // Automatically close after 2 seconds\n        hideProgressBar       // Hide progress bar for toasts\n        newestOnTop           // Show the newest toast on top\n        closeOnClick          // Close toast when clicked\n        pauseOnFocusLoss      // Pause toast when window loses focus\n        draggable             // Allow dragging of toasts\n        pauseOnHover          // Pause on hover over toast\n      />\n    </div>\n  );\n}\n\nexport default Game;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}